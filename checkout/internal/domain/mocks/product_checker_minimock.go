package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain.ProductChecker -o ./mocks/product_checker_minimock.go -n ProductCheckerMock

import (
	"context"
	mm_domain "route256/checkout/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductCheckerMock implements domain.ProductChecker
type ProductCheckerMock struct {
	t minimock.Tester

	funcProduct          func(ctx context.Context, sku uint32) (p1 mm_domain.ProductDesc, err error)
	inspectFuncProduct   func(ctx context.Context, sku uint32)
	afterProductCounter  uint64
	beforeProductCounter uint64
	ProductMock          mProductCheckerMockProduct

	funcProducts          func(ctx context.Context, skus []uint32) (p1 mm_domain.ProductsDesc)
	inspectFuncProducts   func(ctx context.Context, skus []uint32)
	afterProductsCounter  uint64
	beforeProductsCounter uint64
	ProductsMock          mProductCheckerMockProducts

	funcSkus          func(ctx context.Context, startAfterSku uint32, count uint32) (ua1 []uint32, err error)
	inspectFuncSkus   func(ctx context.Context, startAfterSku uint32, count uint32)
	afterSkusCounter  uint64
	beforeSkusCounter uint64
	SkusMock          mProductCheckerMockSkus
}

// NewProductCheckerMock returns a mock for domain.ProductChecker
func NewProductCheckerMock(t minimock.Tester) *ProductCheckerMock {
	m := &ProductCheckerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ProductMock = mProductCheckerMockProduct{mock: m}
	m.ProductMock.callArgs = []*ProductCheckerMockProductParams{}

	m.ProductsMock = mProductCheckerMockProducts{mock: m}
	m.ProductsMock.callArgs = []*ProductCheckerMockProductsParams{}

	m.SkusMock = mProductCheckerMockSkus{mock: m}
	m.SkusMock.callArgs = []*ProductCheckerMockSkusParams{}

	return m
}

type mProductCheckerMockProduct struct {
	mock               *ProductCheckerMock
	defaultExpectation *ProductCheckerMockProductExpectation
	expectations       []*ProductCheckerMockProductExpectation

	callArgs []*ProductCheckerMockProductParams
	mutex    sync.RWMutex
}

// ProductCheckerMockProductExpectation specifies expectation struct of the ProductChecker.Product
type ProductCheckerMockProductExpectation struct {
	mock    *ProductCheckerMock
	params  *ProductCheckerMockProductParams
	results *ProductCheckerMockProductResults
	Counter uint64
}

// ProductCheckerMockProductParams contains parameters of the ProductChecker.Product
type ProductCheckerMockProductParams struct {
	ctx context.Context
	sku uint32
}

// ProductCheckerMockProductResults contains results of the ProductChecker.Product
type ProductCheckerMockProductResults struct {
	p1  mm_domain.ProductDesc
	err error
}

// Expect sets up expected params for ProductChecker.Product
func (mmProduct *mProductCheckerMockProduct) Expect(ctx context.Context, sku uint32) *mProductCheckerMockProduct {
	if mmProduct.mock.funcProduct != nil {
		mmProduct.mock.t.Fatalf("ProductCheckerMock.Product mock is already set by Set")
	}

	if mmProduct.defaultExpectation == nil {
		mmProduct.defaultExpectation = &ProductCheckerMockProductExpectation{}
	}

	mmProduct.defaultExpectation.params = &ProductCheckerMockProductParams{ctx, sku}
	for _, e := range mmProduct.expectations {
		if minimock.Equal(e.params, mmProduct.defaultExpectation.params) {
			mmProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProduct.defaultExpectation.params)
		}
	}

	return mmProduct
}

// Inspect accepts an inspector function that has same arguments as the ProductChecker.Product
func (mmProduct *mProductCheckerMockProduct) Inspect(f func(ctx context.Context, sku uint32)) *mProductCheckerMockProduct {
	if mmProduct.mock.inspectFuncProduct != nil {
		mmProduct.mock.t.Fatalf("Inspect function is already set for ProductCheckerMock.Product")
	}

	mmProduct.mock.inspectFuncProduct = f

	return mmProduct
}

// Return sets up results that will be returned by ProductChecker.Product
func (mmProduct *mProductCheckerMockProduct) Return(p1 mm_domain.ProductDesc, err error) *ProductCheckerMock {
	if mmProduct.mock.funcProduct != nil {
		mmProduct.mock.t.Fatalf("ProductCheckerMock.Product mock is already set by Set")
	}

	if mmProduct.defaultExpectation == nil {
		mmProduct.defaultExpectation = &ProductCheckerMockProductExpectation{mock: mmProduct.mock}
	}
	mmProduct.defaultExpectation.results = &ProductCheckerMockProductResults{p1, err}
	return mmProduct.mock
}

// Set uses given function f to mock the ProductChecker.Product method
func (mmProduct *mProductCheckerMockProduct) Set(f func(ctx context.Context, sku uint32) (p1 mm_domain.ProductDesc, err error)) *ProductCheckerMock {
	if mmProduct.defaultExpectation != nil {
		mmProduct.mock.t.Fatalf("Default expectation is already set for the ProductChecker.Product method")
	}

	if len(mmProduct.expectations) > 0 {
		mmProduct.mock.t.Fatalf("Some expectations are already set for the ProductChecker.Product method")
	}

	mmProduct.mock.funcProduct = f
	return mmProduct.mock
}

// When sets expectation for the ProductChecker.Product which will trigger the result defined by the following
// Then helper
func (mmProduct *mProductCheckerMockProduct) When(ctx context.Context, sku uint32) *ProductCheckerMockProductExpectation {
	if mmProduct.mock.funcProduct != nil {
		mmProduct.mock.t.Fatalf("ProductCheckerMock.Product mock is already set by Set")
	}

	expectation := &ProductCheckerMockProductExpectation{
		mock:   mmProduct.mock,
		params: &ProductCheckerMockProductParams{ctx, sku},
	}
	mmProduct.expectations = append(mmProduct.expectations, expectation)
	return expectation
}

// Then sets up ProductChecker.Product return parameters for the expectation previously defined by the When method
func (e *ProductCheckerMockProductExpectation) Then(p1 mm_domain.ProductDesc, err error) *ProductCheckerMock {
	e.results = &ProductCheckerMockProductResults{p1, err}
	return e.mock
}

// Product implements domain.ProductChecker
func (mmProduct *ProductCheckerMock) Product(ctx context.Context, sku uint32) (p1 mm_domain.ProductDesc, err error) {
	mm_atomic.AddUint64(&mmProduct.beforeProductCounter, 1)
	defer mm_atomic.AddUint64(&mmProduct.afterProductCounter, 1)

	if mmProduct.inspectFuncProduct != nil {
		mmProduct.inspectFuncProduct(ctx, sku)
	}

	mm_params := &ProductCheckerMockProductParams{ctx, sku}

	// Record call args
	mmProduct.ProductMock.mutex.Lock()
	mmProduct.ProductMock.callArgs = append(mmProduct.ProductMock.callArgs, mm_params)
	mmProduct.ProductMock.mutex.Unlock()

	for _, e := range mmProduct.ProductMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmProduct.ProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProduct.ProductMock.defaultExpectation.Counter, 1)
		mm_want := mmProduct.ProductMock.defaultExpectation.params
		mm_got := ProductCheckerMockProductParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProduct.t.Errorf("ProductCheckerMock.Product got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProduct.ProductMock.defaultExpectation.results
		if mm_results == nil {
			mmProduct.t.Fatal("No results are set for the ProductCheckerMock.Product")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmProduct.funcProduct != nil {
		return mmProduct.funcProduct(ctx, sku)
	}
	mmProduct.t.Fatalf("Unexpected call to ProductCheckerMock.Product. %v %v", ctx, sku)
	return
}

// ProductAfterCounter returns a count of finished ProductCheckerMock.Product invocations
func (mmProduct *ProductCheckerMock) ProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduct.afterProductCounter)
}

// ProductBeforeCounter returns a count of ProductCheckerMock.Product invocations
func (mmProduct *ProductCheckerMock) ProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduct.beforeProductCounter)
}

// Calls returns a list of arguments used in each call to ProductCheckerMock.Product.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProduct *mProductCheckerMockProduct) Calls() []*ProductCheckerMockProductParams {
	mmProduct.mutex.RLock()

	argCopy := make([]*ProductCheckerMockProductParams, len(mmProduct.callArgs))
	copy(argCopy, mmProduct.callArgs)

	mmProduct.mutex.RUnlock()

	return argCopy
}

// MinimockProductDone returns true if the count of the Product invocations corresponds
// the number of defined expectations
func (m *ProductCheckerMock) MinimockProductDone() bool {
	for _, e := range m.ProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProductCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProduct != nil && mm_atomic.LoadUint64(&m.afterProductCounter) < 1 {
		return false
	}
	return true
}

// MinimockProductInspect logs each unmet expectation
func (m *ProductCheckerMock) MinimockProductInspect() {
	for _, e := range m.ProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductCheckerMock.Product with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProductCounter) < 1 {
		if m.ProductMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductCheckerMock.Product")
		} else {
			m.t.Errorf("Expected call to ProductCheckerMock.Product with params: %#v", *m.ProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProduct != nil && mm_atomic.LoadUint64(&m.afterProductCounter) < 1 {
		m.t.Error("Expected call to ProductCheckerMock.Product")
	}
}

type mProductCheckerMockProducts struct {
	mock               *ProductCheckerMock
	defaultExpectation *ProductCheckerMockProductsExpectation
	expectations       []*ProductCheckerMockProductsExpectation

	callArgs []*ProductCheckerMockProductsParams
	mutex    sync.RWMutex
}

// ProductCheckerMockProductsExpectation specifies expectation struct of the ProductChecker.Products
type ProductCheckerMockProductsExpectation struct {
	mock    *ProductCheckerMock
	params  *ProductCheckerMockProductsParams
	results *ProductCheckerMockProductsResults
	Counter uint64
}

// ProductCheckerMockProductsParams contains parameters of the ProductChecker.Products
type ProductCheckerMockProductsParams struct {
	ctx  context.Context
	skus []uint32
}

// ProductCheckerMockProductsResults contains results of the ProductChecker.Products
type ProductCheckerMockProductsResults struct {
	p1 mm_domain.ProductsDesc
}

// Expect sets up expected params for ProductChecker.Products
func (mmProducts *mProductCheckerMockProducts) Expect(ctx context.Context, skus []uint32) *mProductCheckerMockProducts {
	if mmProducts.mock.funcProducts != nil {
		mmProducts.mock.t.Fatalf("ProductCheckerMock.Products mock is already set by Set")
	}

	if mmProducts.defaultExpectation == nil {
		mmProducts.defaultExpectation = &ProductCheckerMockProductsExpectation{}
	}

	mmProducts.defaultExpectation.params = &ProductCheckerMockProductsParams{ctx, skus}
	for _, e := range mmProducts.expectations {
		if minimock.Equal(e.params, mmProducts.defaultExpectation.params) {
			mmProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProducts.defaultExpectation.params)
		}
	}

	return mmProducts
}

// Inspect accepts an inspector function that has same arguments as the ProductChecker.Products
func (mmProducts *mProductCheckerMockProducts) Inspect(f func(ctx context.Context, skus []uint32)) *mProductCheckerMockProducts {
	if mmProducts.mock.inspectFuncProducts != nil {
		mmProducts.mock.t.Fatalf("Inspect function is already set for ProductCheckerMock.Products")
	}

	mmProducts.mock.inspectFuncProducts = f

	return mmProducts
}

// Return sets up results that will be returned by ProductChecker.Products
func (mmProducts *mProductCheckerMockProducts) Return(p1 mm_domain.ProductsDesc) *ProductCheckerMock {
	if mmProducts.mock.funcProducts != nil {
		mmProducts.mock.t.Fatalf("ProductCheckerMock.Products mock is already set by Set")
	}

	if mmProducts.defaultExpectation == nil {
		mmProducts.defaultExpectation = &ProductCheckerMockProductsExpectation{mock: mmProducts.mock}
	}
	mmProducts.defaultExpectation.results = &ProductCheckerMockProductsResults{p1}
	return mmProducts.mock
}

// Set uses given function f to mock the ProductChecker.Products method
func (mmProducts *mProductCheckerMockProducts) Set(f func(ctx context.Context, skus []uint32) (p1 mm_domain.ProductsDesc)) *ProductCheckerMock {
	if mmProducts.defaultExpectation != nil {
		mmProducts.mock.t.Fatalf("Default expectation is already set for the ProductChecker.Products method")
	}

	if len(mmProducts.expectations) > 0 {
		mmProducts.mock.t.Fatalf("Some expectations are already set for the ProductChecker.Products method")
	}

	mmProducts.mock.funcProducts = f
	return mmProducts.mock
}

// When sets expectation for the ProductChecker.Products which will trigger the result defined by the following
// Then helper
func (mmProducts *mProductCheckerMockProducts) When(ctx context.Context, skus []uint32) *ProductCheckerMockProductsExpectation {
	if mmProducts.mock.funcProducts != nil {
		mmProducts.mock.t.Fatalf("ProductCheckerMock.Products mock is already set by Set")
	}

	expectation := &ProductCheckerMockProductsExpectation{
		mock:   mmProducts.mock,
		params: &ProductCheckerMockProductsParams{ctx, skus},
	}
	mmProducts.expectations = append(mmProducts.expectations, expectation)
	return expectation
}

// Then sets up ProductChecker.Products return parameters for the expectation previously defined by the When method
func (e *ProductCheckerMockProductsExpectation) Then(p1 mm_domain.ProductsDesc) *ProductCheckerMock {
	e.results = &ProductCheckerMockProductsResults{p1}
	return e.mock
}

// Products implements domain.ProductChecker
func (mmProducts *ProductCheckerMock) Products(ctx context.Context, skus []uint32) (p1 mm_domain.ProductsDesc) {
	mm_atomic.AddUint64(&mmProducts.beforeProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmProducts.afterProductsCounter, 1)

	if mmProducts.inspectFuncProducts != nil {
		mmProducts.inspectFuncProducts(ctx, skus)
	}

	mm_params := &ProductCheckerMockProductsParams{ctx, skus}

	// Record call args
	mmProducts.ProductsMock.mutex.Lock()
	mmProducts.ProductsMock.callArgs = append(mmProducts.ProductsMock.callArgs, mm_params)
	mmProducts.ProductsMock.mutex.Unlock()

	for _, e := range mmProducts.ProductsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1
		}
	}

	if mmProducts.ProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProducts.ProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmProducts.ProductsMock.defaultExpectation.params
		mm_got := ProductCheckerMockProductsParams{ctx, skus}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProducts.t.Errorf("ProductCheckerMock.Products got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProducts.ProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmProducts.t.Fatal("No results are set for the ProductCheckerMock.Products")
		}
		return (*mm_results).p1
	}
	if mmProducts.funcProducts != nil {
		return mmProducts.funcProducts(ctx, skus)
	}
	mmProducts.t.Fatalf("Unexpected call to ProductCheckerMock.Products. %v %v", ctx, skus)
	return
}

// ProductsAfterCounter returns a count of finished ProductCheckerMock.Products invocations
func (mmProducts *ProductCheckerMock) ProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProducts.afterProductsCounter)
}

// ProductsBeforeCounter returns a count of ProductCheckerMock.Products invocations
func (mmProducts *ProductCheckerMock) ProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProducts.beforeProductsCounter)
}

// Calls returns a list of arguments used in each call to ProductCheckerMock.Products.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProducts *mProductCheckerMockProducts) Calls() []*ProductCheckerMockProductsParams {
	mmProducts.mutex.RLock()

	argCopy := make([]*ProductCheckerMockProductsParams, len(mmProducts.callArgs))
	copy(argCopy, mmProducts.callArgs)

	mmProducts.mutex.RUnlock()

	return argCopy
}

// MinimockProductsDone returns true if the count of the Products invocations corresponds
// the number of defined expectations
func (m *ProductCheckerMock) MinimockProductsDone() bool {
	for _, e := range m.ProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProductsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProducts != nil && mm_atomic.LoadUint64(&m.afterProductsCounter) < 1 {
		return false
	}
	return true
}

// MinimockProductsInspect logs each unmet expectation
func (m *ProductCheckerMock) MinimockProductsInspect() {
	for _, e := range m.ProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductCheckerMock.Products with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProductsCounter) < 1 {
		if m.ProductsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductCheckerMock.Products")
		} else {
			m.t.Errorf("Expected call to ProductCheckerMock.Products with params: %#v", *m.ProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProducts != nil && mm_atomic.LoadUint64(&m.afterProductsCounter) < 1 {
		m.t.Error("Expected call to ProductCheckerMock.Products")
	}
}

type mProductCheckerMockSkus struct {
	mock               *ProductCheckerMock
	defaultExpectation *ProductCheckerMockSkusExpectation
	expectations       []*ProductCheckerMockSkusExpectation

	callArgs []*ProductCheckerMockSkusParams
	mutex    sync.RWMutex
}

// ProductCheckerMockSkusExpectation specifies expectation struct of the ProductChecker.Skus
type ProductCheckerMockSkusExpectation struct {
	mock    *ProductCheckerMock
	params  *ProductCheckerMockSkusParams
	results *ProductCheckerMockSkusResults
	Counter uint64
}

// ProductCheckerMockSkusParams contains parameters of the ProductChecker.Skus
type ProductCheckerMockSkusParams struct {
	ctx           context.Context
	startAfterSku uint32
	count         uint32
}

// ProductCheckerMockSkusResults contains results of the ProductChecker.Skus
type ProductCheckerMockSkusResults struct {
	ua1 []uint32
	err error
}

// Expect sets up expected params for ProductChecker.Skus
func (mmSkus *mProductCheckerMockSkus) Expect(ctx context.Context, startAfterSku uint32, count uint32) *mProductCheckerMockSkus {
	if mmSkus.mock.funcSkus != nil {
		mmSkus.mock.t.Fatalf("ProductCheckerMock.Skus mock is already set by Set")
	}

	if mmSkus.defaultExpectation == nil {
		mmSkus.defaultExpectation = &ProductCheckerMockSkusExpectation{}
	}

	mmSkus.defaultExpectation.params = &ProductCheckerMockSkusParams{ctx, startAfterSku, count}
	for _, e := range mmSkus.expectations {
		if minimock.Equal(e.params, mmSkus.defaultExpectation.params) {
			mmSkus.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSkus.defaultExpectation.params)
		}
	}

	return mmSkus
}

// Inspect accepts an inspector function that has same arguments as the ProductChecker.Skus
func (mmSkus *mProductCheckerMockSkus) Inspect(f func(ctx context.Context, startAfterSku uint32, count uint32)) *mProductCheckerMockSkus {
	if mmSkus.mock.inspectFuncSkus != nil {
		mmSkus.mock.t.Fatalf("Inspect function is already set for ProductCheckerMock.Skus")
	}

	mmSkus.mock.inspectFuncSkus = f

	return mmSkus
}

// Return sets up results that will be returned by ProductChecker.Skus
func (mmSkus *mProductCheckerMockSkus) Return(ua1 []uint32, err error) *ProductCheckerMock {
	if mmSkus.mock.funcSkus != nil {
		mmSkus.mock.t.Fatalf("ProductCheckerMock.Skus mock is already set by Set")
	}

	if mmSkus.defaultExpectation == nil {
		mmSkus.defaultExpectation = &ProductCheckerMockSkusExpectation{mock: mmSkus.mock}
	}
	mmSkus.defaultExpectation.results = &ProductCheckerMockSkusResults{ua1, err}
	return mmSkus.mock
}

// Set uses given function f to mock the ProductChecker.Skus method
func (mmSkus *mProductCheckerMockSkus) Set(f func(ctx context.Context, startAfterSku uint32, count uint32) (ua1 []uint32, err error)) *ProductCheckerMock {
	if mmSkus.defaultExpectation != nil {
		mmSkus.mock.t.Fatalf("Default expectation is already set for the ProductChecker.Skus method")
	}

	if len(mmSkus.expectations) > 0 {
		mmSkus.mock.t.Fatalf("Some expectations are already set for the ProductChecker.Skus method")
	}

	mmSkus.mock.funcSkus = f
	return mmSkus.mock
}

// When sets expectation for the ProductChecker.Skus which will trigger the result defined by the following
// Then helper
func (mmSkus *mProductCheckerMockSkus) When(ctx context.Context, startAfterSku uint32, count uint32) *ProductCheckerMockSkusExpectation {
	if mmSkus.mock.funcSkus != nil {
		mmSkus.mock.t.Fatalf("ProductCheckerMock.Skus mock is already set by Set")
	}

	expectation := &ProductCheckerMockSkusExpectation{
		mock:   mmSkus.mock,
		params: &ProductCheckerMockSkusParams{ctx, startAfterSku, count},
	}
	mmSkus.expectations = append(mmSkus.expectations, expectation)
	return expectation
}

// Then sets up ProductChecker.Skus return parameters for the expectation previously defined by the When method
func (e *ProductCheckerMockSkusExpectation) Then(ua1 []uint32, err error) *ProductCheckerMock {
	e.results = &ProductCheckerMockSkusResults{ua1, err}
	return e.mock
}

// Skus implements domain.ProductChecker
func (mmSkus *ProductCheckerMock) Skus(ctx context.Context, startAfterSku uint32, count uint32) (ua1 []uint32, err error) {
	mm_atomic.AddUint64(&mmSkus.beforeSkusCounter, 1)
	defer mm_atomic.AddUint64(&mmSkus.afterSkusCounter, 1)

	if mmSkus.inspectFuncSkus != nil {
		mmSkus.inspectFuncSkus(ctx, startAfterSku, count)
	}

	mm_params := &ProductCheckerMockSkusParams{ctx, startAfterSku, count}

	// Record call args
	mmSkus.SkusMock.mutex.Lock()
	mmSkus.SkusMock.callArgs = append(mmSkus.SkusMock.callArgs, mm_params)
	mmSkus.SkusMock.mutex.Unlock()

	for _, e := range mmSkus.SkusMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ua1, e.results.err
		}
	}

	if mmSkus.SkusMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSkus.SkusMock.defaultExpectation.Counter, 1)
		mm_want := mmSkus.SkusMock.defaultExpectation.params
		mm_got := ProductCheckerMockSkusParams{ctx, startAfterSku, count}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSkus.t.Errorf("ProductCheckerMock.Skus got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSkus.SkusMock.defaultExpectation.results
		if mm_results == nil {
			mmSkus.t.Fatal("No results are set for the ProductCheckerMock.Skus")
		}
		return (*mm_results).ua1, (*mm_results).err
	}
	if mmSkus.funcSkus != nil {
		return mmSkus.funcSkus(ctx, startAfterSku, count)
	}
	mmSkus.t.Fatalf("Unexpected call to ProductCheckerMock.Skus. %v %v %v", ctx, startAfterSku, count)
	return
}

// SkusAfterCounter returns a count of finished ProductCheckerMock.Skus invocations
func (mmSkus *ProductCheckerMock) SkusAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSkus.afterSkusCounter)
}

// SkusBeforeCounter returns a count of ProductCheckerMock.Skus invocations
func (mmSkus *ProductCheckerMock) SkusBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSkus.beforeSkusCounter)
}

// Calls returns a list of arguments used in each call to ProductCheckerMock.Skus.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSkus *mProductCheckerMockSkus) Calls() []*ProductCheckerMockSkusParams {
	mmSkus.mutex.RLock()

	argCopy := make([]*ProductCheckerMockSkusParams, len(mmSkus.callArgs))
	copy(argCopy, mmSkus.callArgs)

	mmSkus.mutex.RUnlock()

	return argCopy
}

// MinimockSkusDone returns true if the count of the Skus invocations corresponds
// the number of defined expectations
func (m *ProductCheckerMock) MinimockSkusDone() bool {
	for _, e := range m.SkusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SkusMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSkusCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSkus != nil && mm_atomic.LoadUint64(&m.afterSkusCounter) < 1 {
		return false
	}
	return true
}

// MinimockSkusInspect logs each unmet expectation
func (m *ProductCheckerMock) MinimockSkusInspect() {
	for _, e := range m.SkusMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductCheckerMock.Skus with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SkusMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSkusCounter) < 1 {
		if m.SkusMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductCheckerMock.Skus")
		} else {
			m.t.Errorf("Expected call to ProductCheckerMock.Skus with params: %#v", *m.SkusMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSkus != nil && mm_atomic.LoadUint64(&m.afterSkusCounter) < 1 {
		m.t.Error("Expected call to ProductCheckerMock.Skus")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductCheckerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockProductInspect()

		m.MinimockProductsInspect()

		m.MinimockSkusInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductCheckerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductCheckerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockProductDone() &&
		m.MinimockProductsDone() &&
		m.MinimockSkusDone()
}
