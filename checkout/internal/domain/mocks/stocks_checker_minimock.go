package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain.StocksChecker -o ./mocks/stocks_checker_minimock.go -n StocksCheckerMock

import (
	"context"
	mm_domain "route256/checkout/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StocksCheckerMock implements domain.StocksChecker
type StocksCheckerMock struct {
	t minimock.Tester

	funcCreateOrder          func(ctx context.Context, userID int64, cart *mm_domain.Cart) (i1 int64, err error)
	inspectFuncCreateOrder   func(ctx context.Context, userID int64, cart *mm_domain.Cart)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mStocksCheckerMockCreateOrder

	funcStocks          func(ctx context.Context, sku uint32) (sa1 []mm_domain.Stock, err error)
	inspectFuncStocks   func(ctx context.Context, sku uint32)
	afterStocksCounter  uint64
	beforeStocksCounter uint64
	StocksMock          mStocksCheckerMockStocks
}

// NewStocksCheckerMock returns a mock for domain.StocksChecker
func NewStocksCheckerMock(t minimock.Tester) *StocksCheckerMock {
	m := &StocksCheckerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mStocksCheckerMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*StocksCheckerMockCreateOrderParams{}

	m.StocksMock = mStocksCheckerMockStocks{mock: m}
	m.StocksMock.callArgs = []*StocksCheckerMockStocksParams{}

	return m
}

type mStocksCheckerMockCreateOrder struct {
	mock               *StocksCheckerMock
	defaultExpectation *StocksCheckerMockCreateOrderExpectation
	expectations       []*StocksCheckerMockCreateOrderExpectation

	callArgs []*StocksCheckerMockCreateOrderParams
	mutex    sync.RWMutex
}

// StocksCheckerMockCreateOrderExpectation specifies expectation struct of the StocksChecker.CreateOrder
type StocksCheckerMockCreateOrderExpectation struct {
	mock    *StocksCheckerMock
	params  *StocksCheckerMockCreateOrderParams
	results *StocksCheckerMockCreateOrderResults
	Counter uint64
}

// StocksCheckerMockCreateOrderParams contains parameters of the StocksChecker.CreateOrder
type StocksCheckerMockCreateOrderParams struct {
	ctx    context.Context
	userID int64
	cart   *mm_domain.Cart
}

// StocksCheckerMockCreateOrderResults contains results of the StocksChecker.CreateOrder
type StocksCheckerMockCreateOrderResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for StocksChecker.CreateOrder
func (mmCreateOrder *mStocksCheckerMockCreateOrder) Expect(ctx context.Context, userID int64, cart *mm_domain.Cart) *mStocksCheckerMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("StocksCheckerMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &StocksCheckerMockCreateOrderExpectation{}
	}

	mmCreateOrder.defaultExpectation.params = &StocksCheckerMockCreateOrderParams{ctx, userID, cart}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the StocksChecker.CreateOrder
func (mmCreateOrder *mStocksCheckerMockCreateOrder) Inspect(f func(ctx context.Context, userID int64, cart *mm_domain.Cart)) *mStocksCheckerMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for StocksCheckerMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by StocksChecker.CreateOrder
func (mmCreateOrder *mStocksCheckerMockCreateOrder) Return(i1 int64, err error) *StocksCheckerMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("StocksCheckerMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &StocksCheckerMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &StocksCheckerMockCreateOrderResults{i1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the StocksChecker.CreateOrder method
func (mmCreateOrder *mStocksCheckerMockCreateOrder) Set(f func(ctx context.Context, userID int64, cart *mm_domain.Cart) (i1 int64, err error)) *StocksCheckerMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the StocksChecker.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the StocksChecker.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the StocksChecker.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mStocksCheckerMockCreateOrder) When(ctx context.Context, userID int64, cart *mm_domain.Cart) *StocksCheckerMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("StocksCheckerMock.CreateOrder mock is already set by Set")
	}

	expectation := &StocksCheckerMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &StocksCheckerMockCreateOrderParams{ctx, userID, cart},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up StocksChecker.CreateOrder return parameters for the expectation previously defined by the When method
func (e *StocksCheckerMockCreateOrderExpectation) Then(i1 int64, err error) *StocksCheckerMock {
	e.results = &StocksCheckerMockCreateOrderResults{i1, err}
	return e.mock
}

// CreateOrder implements domain.StocksChecker
func (mmCreateOrder *StocksCheckerMock) CreateOrder(ctx context.Context, userID int64, cart *mm_domain.Cart) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, userID, cart)
	}

	mm_params := &StocksCheckerMockCreateOrderParams{ctx, userID, cart}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_got := StocksCheckerMockCreateOrderParams{ctx, userID, cart}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("StocksCheckerMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the StocksCheckerMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, userID, cart)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to StocksCheckerMock.CreateOrder. %v %v %v", ctx, userID, cart)
	return
}

// CreateOrderAfterCounter returns a count of finished StocksCheckerMock.CreateOrder invocations
func (mmCreateOrder *StocksCheckerMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of StocksCheckerMock.CreateOrder invocations
func (mmCreateOrder *StocksCheckerMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to StocksCheckerMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mStocksCheckerMockCreateOrder) Calls() []*StocksCheckerMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*StocksCheckerMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *StocksCheckerMock) MinimockCreateOrderDone() bool {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *StocksCheckerMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StocksCheckerMock.CreateOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StocksCheckerMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to StocksCheckerMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		m.t.Error("Expected call to StocksCheckerMock.CreateOrder")
	}
}

type mStocksCheckerMockStocks struct {
	mock               *StocksCheckerMock
	defaultExpectation *StocksCheckerMockStocksExpectation
	expectations       []*StocksCheckerMockStocksExpectation

	callArgs []*StocksCheckerMockStocksParams
	mutex    sync.RWMutex
}

// StocksCheckerMockStocksExpectation specifies expectation struct of the StocksChecker.Stocks
type StocksCheckerMockStocksExpectation struct {
	mock    *StocksCheckerMock
	params  *StocksCheckerMockStocksParams
	results *StocksCheckerMockStocksResults
	Counter uint64
}

// StocksCheckerMockStocksParams contains parameters of the StocksChecker.Stocks
type StocksCheckerMockStocksParams struct {
	ctx context.Context
	sku uint32
}

// StocksCheckerMockStocksResults contains results of the StocksChecker.Stocks
type StocksCheckerMockStocksResults struct {
	sa1 []mm_domain.Stock
	err error
}

// Expect sets up expected params for StocksChecker.Stocks
func (mmStocks *mStocksCheckerMockStocks) Expect(ctx context.Context, sku uint32) *mStocksCheckerMockStocks {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("StocksCheckerMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &StocksCheckerMockStocksExpectation{}
	}

	mmStocks.defaultExpectation.params = &StocksCheckerMockStocksParams{ctx, sku}
	for _, e := range mmStocks.expectations {
		if minimock.Equal(e.params, mmStocks.defaultExpectation.params) {
			mmStocks.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocks.defaultExpectation.params)
		}
	}

	return mmStocks
}

// Inspect accepts an inspector function that has same arguments as the StocksChecker.Stocks
func (mmStocks *mStocksCheckerMockStocks) Inspect(f func(ctx context.Context, sku uint32)) *mStocksCheckerMockStocks {
	if mmStocks.mock.inspectFuncStocks != nil {
		mmStocks.mock.t.Fatalf("Inspect function is already set for StocksCheckerMock.Stocks")
	}

	mmStocks.mock.inspectFuncStocks = f

	return mmStocks
}

// Return sets up results that will be returned by StocksChecker.Stocks
func (mmStocks *mStocksCheckerMockStocks) Return(sa1 []mm_domain.Stock, err error) *StocksCheckerMock {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("StocksCheckerMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &StocksCheckerMockStocksExpectation{mock: mmStocks.mock}
	}
	mmStocks.defaultExpectation.results = &StocksCheckerMockStocksResults{sa1, err}
	return mmStocks.mock
}

// Set uses given function f to mock the StocksChecker.Stocks method
func (mmStocks *mStocksCheckerMockStocks) Set(f func(ctx context.Context, sku uint32) (sa1 []mm_domain.Stock, err error)) *StocksCheckerMock {
	if mmStocks.defaultExpectation != nil {
		mmStocks.mock.t.Fatalf("Default expectation is already set for the StocksChecker.Stocks method")
	}

	if len(mmStocks.expectations) > 0 {
		mmStocks.mock.t.Fatalf("Some expectations are already set for the StocksChecker.Stocks method")
	}

	mmStocks.mock.funcStocks = f
	return mmStocks.mock
}

// When sets expectation for the StocksChecker.Stocks which will trigger the result defined by the following
// Then helper
func (mmStocks *mStocksCheckerMockStocks) When(ctx context.Context, sku uint32) *StocksCheckerMockStocksExpectation {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("StocksCheckerMock.Stocks mock is already set by Set")
	}

	expectation := &StocksCheckerMockStocksExpectation{
		mock:   mmStocks.mock,
		params: &StocksCheckerMockStocksParams{ctx, sku},
	}
	mmStocks.expectations = append(mmStocks.expectations, expectation)
	return expectation
}

// Then sets up StocksChecker.Stocks return parameters for the expectation previously defined by the When method
func (e *StocksCheckerMockStocksExpectation) Then(sa1 []mm_domain.Stock, err error) *StocksCheckerMock {
	e.results = &StocksCheckerMockStocksResults{sa1, err}
	return e.mock
}

// Stocks implements domain.StocksChecker
func (mmStocks *StocksCheckerMock) Stocks(ctx context.Context, sku uint32) (sa1 []mm_domain.Stock, err error) {
	mm_atomic.AddUint64(&mmStocks.beforeStocksCounter, 1)
	defer mm_atomic.AddUint64(&mmStocks.afterStocksCounter, 1)

	if mmStocks.inspectFuncStocks != nil {
		mmStocks.inspectFuncStocks(ctx, sku)
	}

	mm_params := &StocksCheckerMockStocksParams{ctx, sku}

	// Record call args
	mmStocks.StocksMock.mutex.Lock()
	mmStocks.StocksMock.callArgs = append(mmStocks.StocksMock.callArgs, mm_params)
	mmStocks.StocksMock.mutex.Unlock()

	for _, e := range mmStocks.StocksMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmStocks.StocksMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocks.StocksMock.defaultExpectation.Counter, 1)
		mm_want := mmStocks.StocksMock.defaultExpectation.params
		mm_got := StocksCheckerMockStocksParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocks.t.Errorf("StocksCheckerMock.Stocks got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocks.StocksMock.defaultExpectation.results
		if mm_results == nil {
			mmStocks.t.Fatal("No results are set for the StocksCheckerMock.Stocks")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmStocks.funcStocks != nil {
		return mmStocks.funcStocks(ctx, sku)
	}
	mmStocks.t.Fatalf("Unexpected call to StocksCheckerMock.Stocks. %v %v", ctx, sku)
	return
}

// StocksAfterCounter returns a count of finished StocksCheckerMock.Stocks invocations
func (mmStocks *StocksCheckerMock) StocksAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.afterStocksCounter)
}

// StocksBeforeCounter returns a count of StocksCheckerMock.Stocks invocations
func (mmStocks *StocksCheckerMock) StocksBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.beforeStocksCounter)
}

// Calls returns a list of arguments used in each call to StocksCheckerMock.Stocks.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocks *mStocksCheckerMockStocks) Calls() []*StocksCheckerMockStocksParams {
	mmStocks.mutex.RLock()

	argCopy := make([]*StocksCheckerMockStocksParams, len(mmStocks.callArgs))
	copy(argCopy, mmStocks.callArgs)

	mmStocks.mutex.RUnlock()

	return argCopy
}

// MinimockStocksDone returns true if the count of the Stocks invocations corresponds
// the number of defined expectations
func (m *StocksCheckerMock) MinimockStocksDone() bool {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	return true
}

// MinimockStocksInspect logs each unmet expectation
func (m *StocksCheckerMock) MinimockStocksInspect() {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StocksCheckerMock.Stocks with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		if m.StocksMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StocksCheckerMock.Stocks")
		} else {
			m.t.Errorf("Expected call to StocksCheckerMock.Stocks with params: %#v", *m.StocksMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		m.t.Error("Expected call to StocksCheckerMock.Stocks")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StocksCheckerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateOrderInspect()

		m.MinimockStocksInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StocksCheckerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StocksCheckerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockStocksDone()
}
